######################################################
# Terraform Apply Workflow
#
# Performs a simple plan-apply operation with
# fmt and validate built into the pipeline.
#
# ###OMITTED###
# jobs:
#   terraform_run:
#     uses: ./.github/workflows/tf.plan-apply.yml
#     # OR uses:GITHUB_OWNER/REPO_NAME/.github/workflows/tf.plan-apply.yml@main
#     with:
#       terraform_path: some/path
# ###OMITTED###
######################################################

name: terraform plan-apply

on:
  workflow_call:
    inputs:
      # gha-specific
      runs-on:
        type: string
        description: Runner label to use for the jobs
        required: false
        default: ubuntu-latest
      environment:
        type: string
        description: Environment to use for apply operations
        required: false
        default: tf
      approvers:
        type: string
        description: Comma-delimited list of user or group approvers
        required: false
        default: none
      minimum-approvals:
        type: number
        description: Number of approvals required for an apply to run
        required: false
        default: 1
      # globals
      terraform_version:
        type: string
        description: Terraform version to use.
        required: false
        default: latest
      terraform_path:
        type: string
        description: Path to the location of your Terraform configuration or module.
        required: false
        default: "."
      continue_on_fmt_error:
        type: boolean
        description: Fail if terraform fmt reports errors
        required: false
        default: true
      terraform_init_args:
        type: string
        description: Arguments to pass to terraform init  
        required: false
        default: ""
      terraform_validate_args:
        type: string
        description: Arguments to pass to terraform validate
        required: false
        default: ""
      terraform_plan_args:
        type: string
        description: Arguments to pass to terraform plan
        required: false
        default: ""
      terraform_apply_args:
        type: string
        description: Arguments to pass to terraform plan
        required: false
        default: ""
      skip_apply:
        type: boolean
        description: Perform only a plan if this is true
        required: false
        default: false
      
env:
  TF_IN_AUTOMATION: true
  TF_INPUT: false
  TF_PLAN_FILE: ${{ inputs.environment }}.plan

defaults:
  run:
    working-directory: ${{ inputs.terraform_path }}

jobs:
  plan:
    runs-on: ${{ inputs.runs-on }}
    environment:
      name: ${{ inputs.environment }}
    outputs:
      exitcode: ${{ steps.plan.outputs.exitcode }}
    steps:
      - uses: actions/checkout@v4
      - name: setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}
      - name: terraform fmt
        run: terraform fmt -check
        continue-on-error: ${{ inputs.continue_on_fmt_error }}
      - name: terraform init
        run: terraform init
        env:
          TF_CLI_ARGS_init: ${{ inputs.terraform_init_args }}
      - name: terraform validate
        run: terraform validate
        env:
          TF_CLI_ARGS_validate: ${{ inputs.terraform_validate_args }}
      - name: terraform plan
        id: plan
        run: terraform plan -detailed-exitcode -out $TF_PLAN_FILE
        env:
          TF_PLAN_FILE: ${{ env.TF_PLAN_FILE }}
          TF_CLI_ARGS_plan: ${{ inputs.terraform_plan_args }}
      - name: upload plan
        uses: actions/upload-artifact@v4
        if: ${{ github.event_name != 'pull_request' && steps.plan.outputs.exitcode == 2 && !inputs.skip_apply }}
        with:
          name: ${{ env.TF_PLAN_FILE }}
          path: "**/${{ env.TF_PLAN_FILE }}"
          if-no-files-found: error
          overwrite: true
          retention-days: 1

  apply:
    runs-on: ${{ inputs.runs-on }}
    needs: [plan]
    environment:
      name: ${{ inputs.environment }}
    if: ${{ github.event_name != 'pull_request' && needs.plan.outputs.exitcode == 2 && !inputs.skip_apply }}
    permissions:
      issues: write
    steps:
      - uses: trstringer/manual-approval@v1
        name: pre-approval
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ inputs.approvers }}
          minimum-approvals: ${{ inputs.minimum-approvals }}
          additional-approved-words: apply, confirm
          additional-denied-words: backout
        if: ${{ inputs.approvers != 'none' }}
      - uses: actions/checkout@v4
      - name: setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}
      - name: terraform init
        run: terraform init
        env:
          TF_CLI_ARGS_init: ${{ inputs.terraform_init_args }}
      - name: download plan
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.TF_PLAN_FILE }}
      - name: terraform apply
        run: terraform apply $TF_PLAN_FILE
        env:
          TF_PLAN_FILE: ${{ env.TF_PLAN_FILE }}
          TF_CLI_ARGS_apply: ${{ inputs.terraform_apply_args }}
