######################################################
# Terraform Apply Workflow
#
# Performs a simple plan-apply operation
#
# ###OMITTED###
# jobs:
#   terraform_run:
#     uses: ./.github/workflows/tf.plan-apply.yml
#     # OR uses:GITHUB_OWNER/REPO_NAME/.github/workflows/tf.plan-apply.yml@main
#     with:
#       terraform_path: some/path
#     permissions:
#       contents: read
# ###OMITTED###
######################################################

name: terraform plan-apply

on:
  workflow_call:
    inputs:
      # gha-specific
      runs-on:
        type: string
        description: Runner label to use for the jobs
        required: false
        default: ubuntu-latest
      environment:
        type: string
        description: Environment to use for apply operations
        required: false
        default: terraform
      # globals
      terraform_version:
        type: string
        description: Terraform version to use.
        required: false
        default: latest
      terraform_path:
        type: string
        description: Path to the location of your Terraform configuration or module.
        required: false
        default: "."
      terraform_init_args:
        type: string
        description: Arguments to pass to terraform init  
        required: false
        default: ""
      terraform_validate_args:
        type: string
        description: Arguments to pass to terraform validate
        required: false
        default: ""
      terraform_plan_args:
        type: string
        description: Arguments to pass to terraform plan
        required: false
        default: ""
      terraform_apply_args:
        type: string
        description: Arguments to pass to terraform plan
        required: false
        default: ""
      skip_apply:
        type: boolean
        description: Perform only a plan if this is true
        required: false
        default: false
      
env:
  TF_IN_AUTOMATION: true
  TF_INPUT: false

jobs:
  plan:
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        working-directory: ${{ inputs.terraform_path }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}
      - name: terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: terraform init
        id: init
        run: terraform init
        env:
          TF_CLI_ARGS_init: ${{ inputs.terraform_init_args }}
      - name: terraform validate
        id: validate
        run: terraform validate
        env:
          TF_CLI_ARGS_validate: ${{ inputs.terraform_validate_args }}
      - name: terraform plan
        id: plan
        run: terraform plan -out tf.plan
        env:
          TF_CLI_ARGS_plan: ${{ inputs.terraform_plan_args }}
      - name: upload plan
        uses: actions/upload-artifact@v4
        if: github.event_name != 'pull_request' && !inputs.skip_apply
        with:
          name: plan
          path: "**/tf.plan"
          if-no-files-found: error
          overwrite: true

  apply:
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        working-directory: ${{ inputs.terraform_path }}
    needs: [plan]
    permissions:
      contents: read
    environment:
      name: ${{ inputs.environment }}
    if: github.event_name != 'pull_request' && !inputs.skip_apply
    steps:
      - uses: actions/checkout@v4
      - name: setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}
      - name: terraform init
        run: terraform init
        env:
          TF_CLI_ARGS_init: ${{ inputs.terraform_init_args }}
      - name: download plan
        uses: actions/download-artifact@v4
        with:
          name: plan
      - name: terraform apply
        id: apply
        run: terraform apply tf.plan
        env:
          TF_CLI_ARGS_apply: ${{ inputs.terraform_apply_args }}
